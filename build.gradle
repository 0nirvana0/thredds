allprojects {
    group = "edu.ucar"
    version = '4.6.0-SNAPSHOT'
}

// Due to a Gradle limitation, we cannot externalize this buildscript block into a script plugin. However, we can
// exploit the fact that dependencies specified in a parent's buildscript block are visible to all children.
// Thus, as long as we declare all plugins here, no child needs its own buildscript block. See
// http://forums.gradle.org/gradle/topics/how_do_i_include_buildscript_block_from_external_gradle_script#reply_9303244
buildscript {
    apply from: "$rootDir/gradle/dependencies.gradle"

    repositories {
        jcenter()
    }
    dependencies {
        classpath libraries["gretty"]
        classpath libraries["shadow"]
    }
}

apply from: "$rootDir/gradle/coverage.gradle"

evaluationDependsOnChildren()

task jacocoRootReport(type: JacocoReport, group: 'Coverage reports') {
    description = 'Generates an aggregate report from all subprojects'

    Closure isExtendedByJacoco = { Task task -> task.enabled && task.extensions.findByType(JacocoTaskExtension) }
    Collection<Task> tasksExtendedByJacoco = subprojects*.tasks*.matching(isExtendedByJacoco).flatten()
    Collection<File> exeData = tasksExtendedByJacoco*.jacoco*.destinationFile

    // We won't know which subprojects generate executionData until the execution phase.
    // However, the JacocoReport constructor will throw an exception if we leave this null.
    // So, assign an empty collection temporarily.
    executionData = files(exeData)

//    // JacocoReport will be skipped if ANY of its executionData are non-existent, so we must filter out those
//    // that didn't get created during test execution.
//    // See https://gist.github.com/aalmiray/e6f54aa4b3803be0bcac#file-build-gradle
//    outputs.upToDateWhen { false }

    onlyIf {
        println "Yay?"
        println executionData.any { it.exists() }
        executionData.any { it.exists() }
    }
    doFirst {
        // Add all subproject executionData that actually exists.
        executionData = files(executionData.findAll { it.exists() })

        // Skip task if NO executionData exists. This is how JacocoReport ought to work in the first place.
        if (executionData.isEmpty()) {
            throw new StopExecutionException("No execution data found for $name.")
        }
    }
}

apply plugin: "base"  // Gives us the "clean" task for removing jacocoRootReport's output.
