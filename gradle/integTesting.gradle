evaluationDependsOn(':tds')

// Integration test setup
configurations {
    integrationTestCompile {
        extendsFrom testCompile
    }
    integrationTestRuntime {
        extendsFrom integrationTestCompile, testRuntime
    }
}

sourceSets {
    integrationTest {
        java.srcDir file('src/test/java')
        resources.srcDir file('src/test/resources')
        compileClasspath = sourceSets.main.output + sourceSets.test.output + configurations.integrationTestCompile
        runtimeClasspath = output + compileClasspath + configurations.integrationTestRuntime
    }
}


apply from: "$rootDir/gradle/dependencies.gradle"

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath libraries["gradle-tomcat-plugin"]
    }
}

// Here we're applying a third-party plugin in an external build script.
// Because of a Gradle bug (still present in 2.2.1), we can't use the plugin's ID:
//     apply plugin: 'com.bmuschko.tomcat'
// Instead, we must use the plugin's fully-qualified class name.
// See: http://forums.gradle.org/gradle/topics/how_do_i_apply_a_plugin_to_a_project_from_a_shared_applied_gradle_file
apply plugin: com.bmuschko.gradle.tomcat.TomcatPlugin

dependencies {
    tomcat libraries["tomcat-embed-core"]
    tomcat libraries["tomcat-embed-logging-juli"]
    tomcat libraries["tomcat-embed-jasper"]
}

tomcat {
    httpPort = 8081
    ajpPort = 8010
    stopPort = 8006
}

task integrationTomcatRun(type: com.bmuschko.gradle.tomcat.tasks.TomcatRun) {
    onlyIf { !sourceSets.integrationTest.allSource.empty }
//    buildscriptClasspath = tomcatRun.buildscriptClasspath
//    contextPath = tomcatRun.contextPath
    daemon = true
//    tomcatClasspath = tomcatRun.tomcatClasspath
//    webAppClasspath = tomcatRun.webAppClasspath
//    webAppSourceDirectory = tomcatRun.webAppSourceDirectory

    webAppClasspath = project(":tds").tasks.getByName("war").classpath
    webAppSourceDirectory = project(":tds").webAppDir

    contextPath = 'thredds'

    doFirst {
        def contentRoot = 'C:\\Users\\cwardgar\\dev\\tools\\apache-tomcat-8.0.12\\content'
        println "Content root: $contentRoot"
        System.setProperty 'tds.content.root.path', contentRoot

        def mainOutputDir = project.sourceSets.main.output.classesDir
        if (mainOutputDir) {
            classesDirectory = mainOutputDir
        }

        println "===sourceSets.integrationTest.allSource==="
        sourceSets.integrationTest.allSource.srcDirs.each {
            println "\t$it"
        }

        println "===buildscriptClasspath==="
        buildscriptClasspath.files.each {
            println "\t$it"
        }

        println "===contextPath==="
        println contextPath

        println "===tomcatClasspath==="
        tomcatClasspath.files.each {
            println "\t$it"
        }

        println "===webAppClasspath==="
        webAppClasspath.files.each {
            println "\t$it"
        }

        println "===webAppSourceDirectory==="
        println webAppSourceDirectory

        println "===classesDirectory==="
        println classesDirectory
    }
}

task integrationTomcatStop(type: com.bmuschko.gradle.tomcat.tasks.TomcatStop) {
    onlyIf { !sourceSets.integrationTest.allSource.empty }
}

test.testLogging.setShowStandardStreams(true)

task integrationTest(type: Test, dependsOn: jar) {
    dependsOn integrationTomcatRun
    finalizedBy integrationTomcatStop

    testClassesDir = sourceSets.integrationTest.output.classesDir
    classpath = sourceSets.integrationTest.runtimeClasspath
    maxParallelForks = 1

    reports {
        html.destination = project.file("$project.buildDir/reports/integration-tests/")
        junitXml.destination = project.file("$project.buildDir/integration-test-results/")
    }

    doFirst {
        println "===testClassesDir==="
        println testClassesDir

        println "===classpath==="
        classpath.files.each {
            println "\t$it"
        }
    }
}

check.dependsOn integrationTest
