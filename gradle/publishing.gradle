configure(publishedProjects) {
    apply plugin: 'maven-publish'

    publishing {
        publications {
            // Try to create a publication from the project's 'web' component (WAR file) first.
            // If it doesn't have one, try to create a publication from the project's 'java' component (JAR file).
            // This logic is meant to handle subprojects like :tds that have both 'web' AND 'java' components.
            // In such cases, we want only the 'web' component to be published, to avoid issues in Maven where
            // multiple artifacts have the same groupId/artifactId coordinates.
            ['web', 'java'].each { String name ->
                if (!withType(MavenPublication)) {  // Project does not currently have any Maven publications.
                    def softwareComponent = components.findByName name

                    if (softwareComponent) {
                        // Creates a Maven publication with the given name. It will also generate several tasks:
                        //   generatePomFileFor${name}Publication
                        //   publish${name}PublicationToMavenLocal
                        //   publishToMavenLocal  (depends on all instances of the above task)
                        //   publish${name}PublicationTo${repoName}Repository
                        //   publish  (depends on all instances of the above task)
                        "$name"(MavenPublication) {
                            from softwareComponent
                        }
                    }
                }
            }
        }
    }

//    repositories {
//        flatDir {
//            dirs buildDir
//        }
//    }
}

///////////////////////////////////////////////// Root /////////////////////////////////////////////////

import org.gradle.api.internal.artifacts.publish.ArchivePublishArtifact

publishing {
    publications {
        // Publish all artifacts we've added to the "archives" configuration of the root project. See fatJars.gradle.
        rootProject.configurations.archives.allArtifacts.each {
            if (it instanceof ArchivePublishArtifact) {
                AbstractArchiveTask task = (it as ArchivePublishArtifact).archiveTask

                "$task.baseName"(MavenPublication) {
                    artifactId task.baseName
                    artifact task
                }
            }
        }
    }
}

// The rules for when you can access GenerateMavenPom tasks are convoluted: https://goo.gl/ftqDK8
// The model block didn't work for me; only gradle.projectsEvaluated.
gradle.projectsEvaluated {
    task generatePomFilesForPublication {
        Collection<Task> allTasks = project.getAllTasks(true).values().flatten()
        Collection<Task> genPomTasks = allTasks.findAll {
            it instanceof org.gradle.api.publish.maven.tasks.GenerateMavenPom
        }
        dependsOn genPomTasks
    }
}
