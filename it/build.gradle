apply from: "$rootDir/gradle/dependencies.gradle"
apply from: "$rootDir/gradle/java.gradle"
apply from: "$rootDir/gradle/testing.gradle"
apply from: "$rootDir/gradle/coverage.gradle"

dependencies {
    testCompile project(":cdm")
    testRuntime project(":clcommon")
    testRuntime project(":grib")
    testCompile project(":httpservices")
    testRuntime project(":opendap")
    testRuntime project(":visad")
    testCompile project(path: ':cdm', configuration: 'testArtifacts')

    testRuntime libraries["jaxen"]
    testCompile libraries["jdom2"]
    testCompile libraries["commons-io"]
    testCompile libraries["joda-time"]
    testCompile libraries["httpcore"]
    testCompile libraries["httpclient"]
    testCompile libraries["commons-lang3"]

    testCompile libraries["com.eclipsesource.restfuse"]

    // Unlike the other subprojects, we do not need to add an SLF4J binding to testRuntime;
    // we're overlaying tds (see below), so we're already getting the binding that it declares.
}


apply plugin: 'org.akhikhl.gretty'

gretty {
    servletContainer = 'tomcat7'
    httpPort = 8081
    contextPath = '/thredds'

    // Overlay the "tds" webapp onto this project's webapp.
    // This is how we're able to have tds integration tests outside of the tds project.
    // See http://akhikhl.github.io/gretty-doc/Web-app-overlays.html
    overlay ':tds'

    integrationTestTask = 'integrationTest' // The name of an existing gradle task.

    // By default, this field is 'false', which causes Gretty to start the embedded Tomcat process with a non-blocking
    // entropy source. It is intended to make startup faster.
    // See http://wiki.apache.org/tomcat/HowTo/FasterStartUp#Entropy_Source and http://goo.gl/NnJtpZ
    //
    // However, setting the "java.security.egd" system property as described in the Tomcat doc causes an error
    // message when running tests on Windows: https://bz.apache.org/bugzilla/show_bug.cgi?id=56139
    //
    // Making this field 'true' prevents Gretty from setting that property, and thus avoids the error message.
    // It turns out to have negligible effect on startup time, at least in this integration testing context.
    //
    // Also, a comment in the bug report mentions that this issue has been fixed as of Tomcat 7.0.53.
    // However, it is actually still present as of 7.0.55
    secureRandom = true

    def contentRoot = 'C:/Users/cwardgar/dev/tools/apache-tomcat-8.0.12/content'
//    def contentRoot = 'Q:/cdmUnitTest/it/content'

    systemProperty 'tds.content.root.path', contentRoot
//    systemProperty 'tds.dir.cdmUnitTest', 'Q:/cdmUnitTest'
}

// Gretty will start the webapp before this task and shut it down afterward.
task integrationTest(type: Test) {
    setEnabled true

    include 'thredds/server/catalog/TestTdsLocal.class'
    include 'thredds/TestEncoding.class'

//    systemProperty 'unidata.testdata.path', 'Q:'
}

task integrationTestReport(type: JacocoReport, dependsOn: "integrationTest") {
    // executionData must be closure, because appBeforeIntegrationTest is not defined yet.
    // We must pass jacoco.destinationFile, not appBeforeIntegrationTest itself,
    // because otherwise JacocoReport would translate task argument to closure and Project.files(...)
    // (which is used internally by executionData) is not able to resolve recursive closures.
    executionData { tasks.appBeforeIntegrationTest.jacoco.destinationFile }

    reports {
        html.destination = reporting.file("jacoco/integrationTest/html")
    }
}

// We want to modify the "appBeforeIntegrationTest" task, but like all Gretty tasks,
// it won't be added to the project until after evaluation: http://goo.gl/qlFXTD
// So, our modification must also occur after evaluation.
afterEvaluate {
    appBeforeIntegrationTest {
        onlyIf { tasks.integrationTest.enabled }

        // "jacoco" extension is created automatically for all AppBeforeIntegrationTest tasks
        // and has type org.gradle.testing.jacoco.plugins.JacocoTaskExtension
        jacoco {
            append = false
            destinationFile = new File(buildDir, 'jacoco/integrationTest.exec')
        }

        doFirst {
            // tomcatBaseDir is the working directory for embedded tomcat. We want to write our logs there as well.
            File tomcatBaseDir = launcherConfig.baseDir
            gretty.logDir = new File(tomcatBaseDir, "logs").absolutePath
        }
    }

    appAfterIntegrationTest {
        onlyIf { tasks.integrationTest.enabled }
    }
}
