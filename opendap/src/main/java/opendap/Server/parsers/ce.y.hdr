/* Copyright 2009, UCAR/Unidata and OPeNDAP, Inc.
   See the COPYRIGHT file for more information. */

%error-verbose

%define public
%define package "opendap.Server.parsers"
%define extends "Ceparse"
%define throws "ParseException"
%define lex_throws "ParseException"

%code imports {
import opendap.dap.*;
import opendap.dap.parsers.*;
import opendap.Server.*;
import java.io.*;
import java.util.*;
}

%code {
 
    private List<AST> nodeset = null;

    /**
     * Instantiates the Bison-generated parser.
     * @param yylexer The scanner that will supply tokens to the parser.
     */

    public CeParser(BaseTypeFactory factory)
    {
	super(factory);
	this.yylexer = new Celex(this);
	super.lexstate = (Celex)this.yylexer;
    }


    /* the parse function allows the specification of a
       new stream in case one is reusing the parser
    */

    boolean parse(StringReader sreader) throws ParseException
    {
	((Celex)yylexer).reset(parsestate);
	((Celex)yylexer).setStream(sreader);
	return parse();
    }

    // Static entry point to be called by CEEvaluator
    // This parses, then fills in the evaluator from the AST

    static public boolean constraint_expression(CEEvaluator ceEval,
                                         BaseTypeFactory factory,
					 ClauseFactory clauseFactory,
					 StringReader sreader,
				         String url // for error reporting
					 )
            throws DAP2Exception, ParseException
    {
	CeParser parser = new CeParser(factory);
	parser.setURL(url);
        ServerDDS sdds = ceEval.getDDS();
        if(!parser.parse(sreader)) return false;
        ASTconstraint root = (ASTconstraint)parser.getAST();
	root.init(ceEval,factory,clauseFactory,sdds,parser.getASTnodeset());
	root.walkConstraint();
        return true;
    }

    String url = null;

    void setURL(String url) {this.url = url;}

    String getURL() {return url;}

}
