apply plugin: 'groovy'

apply from: "../gradle/dependencies.gradle"

dependencies {
    compile gradleApi()  // We're developing a custom task, so we need the Gradle API.

    testCompile (libraries["spock-core"]) {
        // The Gradle API drags in the bundled version of Groovy that Gradle ships with (localGroovy()) â€“
        // see https://discuss.gradle.org/t/unable-to-force-gradle-to-use-groovy-2-0-0-for-the-project/7021.
        // Spock drags in another Groovy as a transitive dependency.
        //
        // So, there are multiple candidate versions of the Groovy dependency. Ordinarily, this is no problem for
        // Gradle; it bas version-conflict-resolution machinery to deal with it. However, localGroovy() is a special
        // kind of dependency that doesn't participate in that resolution (again, see above URL).
        //
        // Once added to a configuration, localGroovy() will remain part of it no matter what. Furthermore, since
        // localGroovy() is "special", Gradle will not consider a second, "normal" Groovy dependency to be in conflict
        // with it. This can result in two different versions of Groovy in the same configuration, and ultimately
        // errors like: "groovy.lang.GroovyRuntimeException: Conflicting module versions. Module [groovy-all is loaded
        // in version 2.4.4 and you are trying to load version 2.4.1".
        //
        // Our solution is to explicitly exclude any other Groovy dependencies whenever localGroovy() is already part
        // of the configuration.
        exclude group: 'org.codehaus.groovy', module: 'groovy-all'
    }
}

task foo << {
    println rootProject?.name
    println project?.name
    println project?.parent?.name
    println "$rootDir"
}
